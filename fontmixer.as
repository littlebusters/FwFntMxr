import com.adobe.serialization.json.JSON;import flash.events.MouseEvent;MMExecute('fw.runScript("../Command Panels/fontMixer.jsf");');// 混植の種類を生成var mixTypes:Object = new Object();var customChars:String = new String();// イベントの設定btnApply.addEventListener(MouseEvent.CLICK, btnApplyClick);cbMixOthers.addEventListener(MouseEvent.CLICK, setCustomChars);baseLineOffsetAuto.addEventListener(MouseEvent.CLICK, baselineAutoSetting);attrsAdjusting.addEventListener(MouseEvent.CLICK, attrsAdjustingSetting);// ファンクション// チェックボックスを見て、混植する文字種のon/offを設定// その他にチェックが入っていた場合、テキストからユニコードを生成function setMixTypes(){	mixTypes.hiragana = cbMixHiragana.selected;	mixTypes.katakana = cbMixKatakana.selected;	mixTypes.alphaU   = cbMixAlphaU.selected;	mixTypes.alphaL   = cbMixAlphaL.selected;	mixTypes.digit    = cbMixDigit.selected;	mixTypes.symbols  = cbMixSymbol.selected;	mixTypes.others   = cbMixOthers.selected;		mixTypes.attrsAdjusting = attrsAdjusting.selected;		mixTypes.sizeOffset     = inputValueChk();	mixTypes.baseLineOffset = baseLineOffset.value;	mixTypes.baseLineOffsetAuto = baseLineOffsetAuto.selected;		customChars = '';	if(cbMixOthers.selected) {		trace(txtCustomChars.text);		var customCharLng:int = txtCustomChars.text.length;				for(var repeat:int = 0; repeat < customCharLng; repeat++) {			customChars += '\\u' + 							("000" + txtCustomChars.text.charCodeAt(repeat).toString(16)).substr(-4);		}		trace(customChars);	}	mixTypes.otherChars = customChars;	for each (var item in mixTypes) { 		trace(item); 	}}// その他を設定する/しない場合にテキストフィールドの有効/無効化切替function setCustomChars(e:MouseEvent):void{	txtCustomChars.enabled = cbMixOthers.selected;}function baselineAutoSetting(e:MouseEvent):void{	baseLineOffset.enabled = !baseLineOffsetAuto.selected;	if(!baseLineOffsetAuto.selected) {		baseLineOffsetAuto.alpha = 0.4;	} else {		baseLineOffsetAuto.alpha = 1;	}}function attrsAdjustingSetting(e:MouseEvent):void{	fontSizeOffset.enabled = attrsAdjusting.selected;	fontSizeUnits.enabled = attrsAdjusting.selected;	baseLineOffsetAuto.enabled = attrsAdjusting.selected;	if(!baseLineOffsetAuto.selected) {		baseLineOffset.enabled = attrsAdjusting.selected;	}}// Value Checkfunction inputValueChk() {	var tmp:Array = new Array();	var fontSize:Number;		tmp = fontSizeOffset.textField.text.split('.');	if(tmp.length > 1) {		fontSize = new Number(tmp[0] + '.' + tmp[1]);	} else if(tmp.length == 1) {		fontSize = new Number(tmp[0]);	}	if(!fontSize) {		fontSize = 115;		mixTypes.fontSizeUnits = '%';	} else {		mixTypes.fontSizeUnits  = fontSizeUnits.text;	}		return fontSize;}// 混植の実行function btnApplyClick(e:MouseEvent):void{	setMixTypes();	MMExecute("LBfontMix(" + JSON.encode(mixTypes) + ")");		//testFnc();	//MMExecute("sampleExec()");	//MMExecute("testtest()");}function testFnc() {	trace(inputValueChk());}/* 未使用 OSのフォント一覧を取得var allFonts:Array = Font.enumerateFonts(true);allFonts.sortOn("fontName", Array.CASEINSENSITIVE);for(var i:int=0;i<allFonts.length;i++){	trace(allFonts[i].fontName);} フォントリストの生成var dp:DataProvider = new DataProvider();baseFontList.dataProvider = dp;mixFontList.dataProvider = dp;for(var fontLen:int = 0; fontLen < allFonts.length; fontLen++) {	dp.addItem({label: allFonts[fontLen].fontName});}txtCustomChars.addEventListener(Event.CHANGE,scanChars);function scanChars(e:Event):void{	trace('event!!!!!!!!!!!!!!!!!!!')}function cbMixTypeClick(e:MouseEvent):void{	setMixTypes();}cbMixHiragana.addEventListener(MouseEvent.CLICK, cbMixTypeClick);cbMixKatakana.addEventListener(MouseEvent.CLICK, cbMixTypeClick);cbMixAlphaU.addEventListener  (MouseEvent.CLICK, cbMixTypeClick);cbMixAlphaL.addEventListener  (MouseEvent.CLICK, cbMixTypeClick);cbMixDigit.addEventListener   (MouseEvent.CLICK, cbMixTypeClick);cbMixSymbol.addEventListener  (MouseEvent.CLICK, cbMixTypeClick);cbMixOthers.addEventListener  (MouseEvent.CLICK, cbMixTypeClick);//	MMExecute("prompt('font mix is: ', "+mixTypes+");");//	for(var i:int = 0; i < mixTypes.length; i++) {//		trace(mixTypes[i]);//	}//	trace('\n'); */